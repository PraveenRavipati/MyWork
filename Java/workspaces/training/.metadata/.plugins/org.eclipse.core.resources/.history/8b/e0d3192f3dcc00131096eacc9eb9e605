package com.bank_transaction.thread;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.StringTokenizer;


class BankTransaction_Using_Threads
{
	public static void main(String[] args) {
		Hashtable<String, Double> hashtable=new Hashtable<String, Double>();
		File folder = new File(
				"/home/praveen/Desktop/works/Banking using threads/");
		File[] listOfFiles = folder.listFiles();
		List<Thread> list = new ArrayList<Thread>();

	for (File file : listOfFiles) {
		if (file.isFile()) {
			System.out.println("in if");
			Thread t = new Thread(new GivenTask(hashtable
					,file.getAbsolutePath()));
			t.start();
			list.add(t);
		}
	}
}

}


class GivenTask implements Runnable {
	private Hashtable<String, Double> hashtable;
	private String filepath;
	
	
	public GivenTask(Hashtable<String, Double> hashtable,String filepath)
	{
		this.hashtable=hashtable;
		this.filepath=filepath;
	}
	@Override
	public void run() {
		BufferedReader input = null;
		try {
			input = new BufferedReader(new FileReader(filepath));
			String str = null;
			double bal = 0.0;
			String arg[] = new String[3];
			StringTokenizer sTokenizer = null;
			while ((str = input.readLine()) != null) {
				sTokenizer = new StringTokenizer(str, ",");
				for (int i = 0; sTokenizer.hasMoreTokens(); i++) {
					arg[i] = sTokenizer.nextToken();
				}
				if (arg[0] != null) {
					String AccountNo = arg[0];
					String transaction = arg[1];
					double Amount = Double.parseDouble(arg[2]);
					Double initialAmount = hashtable.get(AccountNo);
					if (initialAmount != null) {
						hashtable = transaction(UserAccounts, AccountNo,
								Amount, transaction, initialAmount);
					} else {
						UserAccounts.put(AccountNo, bal);
						UserAccounts = transaction(UserAccounts, AccountNo, Amount,
								transaction, bal);
					}

				}
			}
		} catch (NumberFormatException e) {
			// TODO: handle exception
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}
