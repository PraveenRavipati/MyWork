package com.snapfish.banktransaction.classes;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Map.Entry;


public class BankTransaction {

	public static void main(String[] args) {
		Hashtable<Integer, Double> UserAccounts=new Hashtable<Integer, Double>();
		Scanner s=new Scanner(System.in);
		/*System.out.print("Enter The Input file path:");
		String FilePath=s.next();*/
		String FilePath="/home/praveen/Desktop/training/BankTransactions/src/com/snapfish/inputfiles/BankinputFile.txt";
		BankTransaction bt=new BankTransaction();
		try {
			UserAccounts=bt.input(FilePath,UserAccounts);
			bt.summary(UserAccounts);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("File Read Error");
		}
	}

	public void summary(Hashtable<Integer, Double> userAccounts) {
		System.out.println("\n\n\tSummary\n");
		for (Entry<Integer, Double> entry : userAccounts.entrySet()) {
           int Account = entry.getKey();
           double Amount = entry.getValue();
            System.out.println("The Account no"+Account+" Amount"+Amount);
        }
	}

	public Hashtable<Integer, Double> input(String filePath,Hashtable<Integer, Double> UserAccounts) throws NumberFormatException, IOException {
		BufferedReader input = new BufferedReader(new FileReader(filePath));
		String str = null;
		double bal=0.0;
		String arg[] = new String[3];
		StringTokenizer sTokenizer = null;
		while ((str = input.readLine()) != null) {
			sTokenizer = new StringTokenizer(str, ",");
			for (int i = 0; sTokenizer.hasMoreTokens(); i++) {
				arg[i] = sTokenizer.nextToken();
			}
			if (arg[0] != null) {
				int AccountNo = Integer.parseInt(arg[0]);
				String transaction = arg[1];
				double amount=Double.parseDouble(arg[2]);
				if(UserAccounts.containsKey(AccountNo))
				{
					System.out.println(AccountNo+" Account exist");
					if(transaction.equalsIgnoreCase("deposite"))
					{
						UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)+amount);
						System.out.println(amount+" Ammount is added to "+AccountNo);
					}
					else if(transaction.equalsIgnoreCase("withdraw"))
					{
						UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)-amount);
						System.out.println(amount+" Ammount is removes from "+AccountNo);
					}
				}
				else
				{
					System.out.println("Account "+AccountNo+" not Exist");
					UserAccounts.put(AccountNo, bal);
					System.out.println(AccountNo+" is created");
					if(transaction.equalsIgnoreCase("deposite"))
					{
						UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)+amount);
						System.out.println(amount+" Ammount is added to "+AccountNo);
					}
					else if(transaction.equalsIgnoreCase("withdraw"))
					{
						UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)-amount);
						System.out.println(amount+" Ammount is removes from "+AccountNo);
					}
					
				}
			}
		}
		return UserAccounts;
	}
	public Hashtable<Integer,Double>  Transaction(Hashtable<Integer, Double> UserAccounts,int AccountNo,int Amount,String transaction) {
		if(transaction.equalsIgnoreCase("deposite"))
		{
			UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)+amount);
			System.out.println(amount+" Ammount is added to "+AccountNo);
		}
		else if(transaction.equalsIgnoreCase("withdraw"))
		{
			UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)-amount);
			System.out.println(amount+" Ammount is removes from "+AccountNo);
		}
		return UserAccounts;
	}

}
