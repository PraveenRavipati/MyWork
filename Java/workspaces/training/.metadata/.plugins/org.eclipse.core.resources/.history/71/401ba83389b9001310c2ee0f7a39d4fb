package net.mindview.util;

import java.io.*;
import java.util.*;

public class TextFile extends ArrayList<String> {
	private static final long serialVersionUID = 1L;

	// Read a file as a single string:
	public static String read(String fileName) {

		StringBuilder sb = new StringBuilder();
		StringBuilder sp=new StringBuilder();
		try {
			BufferedReader in = new BufferedReader(new FileReader(new File(
					fileName).getAbsoluteFile()));
			int controlDepth = 0;
			try {
				String s;
				
				while ((s = in.readLine()) != null) {
					int i = 0, j = 0;
					// System.out.println(s.length());
					while (i < s.length()) {
						if ((s.charAt(i) == '{')) {

							if ((controlDepth > 0)) {
								j = 0;
								while (j!=controlDepth) {
									sb.append("1");
									j++;
								}
							}
							controlDepth = controlDepth + 1;
							System.out.println("cd:"+controlDepth);
							i++;
						} else if (((s.charAt(i)) == '}')) {
							controlDepth = controlDepth - 1;
							System.out.println("cd:"+controlDepth);
							if ((controlDepth > 0)) {

								j = 0;
								while (j!=controlDepth) {
									j++;
									sb.append("2");
								}
							}
							i++;
						} else if ((i == 0)) {
							j = 0;
							while (j != controlDepth) {
								j++;
								sb.append("1");
							}
							i++;
							System.out.println("cd:"+controlDepth);
						} else {
							i++;
						
						}

					}
					sb.append(s+"\n");
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		return sb.toString();
	}

	// Write a single file in one method call:
	public static void write(String fileName, String text) {
		try {
			PrintWriter out = new PrintWriter(
					new File(fileName).getAbsoluteFile());
			try {
				out.print(text);
			} finally {
				out.close();
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	// Read a file, split by any regular expression:
	public TextFile(String fileName, String splitter) {
		super(Arrays.asList(read(fileName).split(splitter)));
		// Regular expression split() often leaves an empty
		// String at the first position:
		if (get(0).equals(""))
			remove(0);
	}

	// Normally read by lines:
	public TextFile(String fileName) {
		this(fileName, "\n");
	}

	public void write(String fileName) {
		try {
			PrintWriter out = new PrintWriter(
					new File(fileName).getAbsoluteFile());
			try {
				for (String item : this)
					out.println(item);
			} finally {
				out.close();
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	// Simple test:
	public static void main(String[] args) {
		String file = read("/home/praveen/Desktop/TextFile.java");
		write("/home/praveen/Desktop/test1.java", file);
		TextFile text = new TextFile("/home/praveen/Desktop/test1.java");
		text.write("/home/praveen/Desktop/test1.java");

	}
}