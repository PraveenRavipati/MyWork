package com.snapfish.banktransaction.classes;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.StringTokenizer;


public class BankTransaction {

	public static void main(String[] args) {
		Hashtable<Integer, Double> UserAccounts=new Hashtable<Integer, Double>();
		Scanner s=new Scanner(System.in);
		/*System.out.print("Enter The Input file path:");
		String FilePath=s.next();*/
		String FilePath="/home/praveen/Desktop/training/BankTransactions/src/com/snapfish/inputfiles/BankinputFile.txt";
		BankTransaction bt=new BankTransaction();
		try {
			UserAccounts=bt.input(FilePath,UserAccounts);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("File Read Error");
		}
	}

	public Hashtable<Integer, Double> input(String filePath,Hashtable<Integer, Double> UserAccounts) throws NumberFormatException, IOException {
		BufferedReader input = new BufferedReader(new FileReader(filePath));
		String str = null;
		double bal=0.0;
		String arg[] = new String[3];
		StringTokenizer sTokenizer = null;
		while ((str = input.readLine()) != null) {
			sTokenizer = new StringTokenizer(str, ",");
			for (int i = 0; sTokenizer.hasMoreTokens(); i++) {
				arg[i] = sTokenizer.nextToken();
			}
			if (arg[0] != null) {
				int AccountNo = Integer.parseInt(arg[0]);
				String transaction = arg[1];
				double amount=Double.parseDouble(arg[2]);
//				System.out.println("The Account no:"+AccountNo);
//				System.out.println("The Transaction:"+transaction);
//				System.out.println("The Amount:"+amount+"\n\n\n");
				if(UserAccounts.containsKey(AccountNo))
				{
					System.out.println(AccountNo+" Account exist");
					if(transaction.equalsIgnoreCase("deposite"))
					{
						UserAccounts.put(AccountNo, UserAccounts.get(AccountNo)+amount)
					}
				}
				else
				{
					System.out.println("Account "+AccountNo+" not Exist");
					UserAccounts.put(AccountNo, bal);
					System.out.println(AccountNo+" is created");
				}
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				/*			if(UserAccounts.containsKey(AccountNo))
				{
					System.out.println("in if");
					if(transaction.equals("deposite"))
					{
						System.out.print("\nAccNo:"+AccountNo);
						bal=UserAccounts.get(AccountNo);
						System.out.print("\nbal"+bal+"\n\n");
						bal=bal+amount;
						UserAccounts.put(AccountNo, UserAccounts.get(UserAccounts)+amount);
						System.out.println("The Amount depost:"+UserAccounts.get(AccountNo));
					}
				}
				else {
					UserAccounts.put(AccountNo, (Double) 0.0);
					System.out.println("\nAccount created");
					if(transaction.equals("deposite"))
					{
						System.out.print("\nAccNo:"+AccountNo);
						bal=UserAccounts.get(AccountNo);
						System.out.print("\nbal"+bal+"\n\n");
					}
					
				}*/
			}
		}
		return UserAccounts;
	}

}
